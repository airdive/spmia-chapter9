<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.thoughtmechanix</groupId>
  <artifactId>configurationserver</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>Config Server</name>
  <description>Config Server demo project</description>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.4.4.RELEASE</version>
  </parent>
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>Camden.SR5</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-config-server</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-config</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-eureka</artifactId>
    </dependency>
  </dependencies>

  <!--Docker build Config-->
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <start-class>com.thoughtmechanix.confsvr.ConfigServerApplication</start-class>
    <java.version>1.8</java.version>
    <docker.image.name>liuisdocker/tmx-confsvr</docker.image.name>
    <docker.image.tag>chapter9</docker.image.tag>
  </properties>
  <build>
     <plugins>
         <!-- We use the Resources plugin to filer Dockerfile and run.sh, it inserts actual JAR filename -->
         <!-- The final Dockerfile will be created in target/dockerfile/Dockerfile -->
         <plugin>
             <artifactId>maven-resources-plugin</artifactId>
             <executions>
                 <execution>
                     <id>copy-resources</id>
                     <!-- here the phase you need -->
                     <phase>validate</phase>
                     <goals>
                         <goal>copy-resources</goal>
                     </goals>
                     <configuration>
                         <outputDirectory>${basedir}/target/dockerfile</outputDirectory>
                         <resources>
                             <resource>
                                 <directory>src/main/docker</directory>
                                 <filtering>true</filtering>
                             </resource>
                         </resources>
                     </configuration>
                 </execution>
             </executions>
         </plugin>
         <plugin>
             <groupId>com.spotify</groupId>
             <artifactId>docker-maven-plugin</artifactId>
             <version>1.1.0</version>
             <configuration>
                 <!-- 私有仓库配置，需要settings.xml文件配合serverId对应的服务地址 -->
                 <!-- settings.xml配置docker登录信息，username为用户名而不是email
                     <server>
                          <id>liuis-dockerhub</id>
                          <username>liuisdocker</username>
                          <password>9980aa</password>
                     </server>
                 -->
                 <serverId>liuis-dockerhub</serverId>
                 <!-- 推送到dockerhub  -->
                 <registryUrl>docker.io</registryUrl>

                 <imageName>${docker.image.name}:${docker.image.tag}</imageName>
                 <dockerDirectory>${basedir}/target/dockerfile</dockerDirectory>
                 <resources>
                     <resource>
                         <targetPath>/</targetPath>
                         <directory>${project.build.directory}</directory>
                         <include>${project.build.finalName}.jar</include>
                     </resource>
                 </resources>
                 <!-- 此处必须添加imageTag，不然removeImage不能成功 -->
                 <imageTags>
                     <imageTag>${docker.image.tag}</imageTag>
                 </imageTags>
             </configuration>
             <executions>
                 <!-- package之前清除上一次构建的image -->
                 <execution>
                     <id>remove-image</id>
                     <phase>package</phase>
                     <goals>
                         <goal>removeImage</goal>
                     </goals>
                     <configuration>
                         <imageName>
                             ${docker.image.name}:${docker.image.tag}
                         </imageName>
                     </configuration>
                 </execution>
                 <!-- 将docker:build绑定到package这个phase  -->
                 <execution>
                     <id>build-image</id>
                     <phase>package</phase>
                     <goals>
                         <goal>build</goal>
                     </goals>
                     <configuration>
                         <!-- imageName中若不指定tag，则会打上latest -->
                         <imageName>${docker.image.name}:${docker.image.tag}</imageName>
                         <!-- 可以使用<imageTags>标签打其他额外的tag -->
                     </configuration>
                 </execution>
                 <!--<execution>-->
                 <!--<id>tag-image</id>-->
                 <!--<phase>install</phase>-->
                 <!--<goals>-->
                 <!--<goal>tag</goal>-->
                 <!--</goals>-->
                 <!--<configuration>-->
                 <!--&lt;!&ndash; docker tag IMAGE[:TAG] [REGISTRY_HOST[:REGISTRY_PORT]/]REPOSITORY[:TAG]  &ndash;&gt;-->
                 <!--&lt;!&ndash; images与IMAGE[:TAG]对应，必须在build阶段已经构建了 &ndash;&gt;-->
                 <!--<image>${docker.image.name}/${docker.image.tag}:${project.version}</image>-->
                 <!--&lt;!&ndash; newName与tag命令的第二个参数对应 &ndash;&gt;-->
                 <!--<newName>-->
                 <!--${docker.image.name}/${docker.image.tag}:${project.version}-->
                 <!--</newName>-->
                 <!--</configuration>-->
                 <!--</execution>-->
                 <execution>
                     <id>push-image</id>
                     <phase>install</phase>
                     <goals>
                         <goal>push</goal>
                     </goals>
                     <configuration>
                         <imageName>
                             ${docker.image.name}:${docker.image.tag}
                         </imageName>
                     </configuration>
                 </execution>
             </executions>
         </plugin>
         <plugin>
             <groupId>org.springframework.boot</groupId>
             <artifactId>spring-boot-maven-plugin</artifactId>
         </plugin>
     </plugins>
 </build>

</project>
